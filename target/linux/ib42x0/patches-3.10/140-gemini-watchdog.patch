--- a/arch/arm/mach-gemini/devices.c	2011-04-21 02:28:17.181064247 +0200
+++ b/arch/arm/mach-gemini/devices.c	2011-04-21 02:33:29.493466642 +0200
@@ -208,3 +208,21 @@
 	return platform_device_register(&pata_gemini_devices[i]);
 }
 
+static struct resource wdt_resource = {
+	.start	= GEMINI_WAQTCHDOG_BASE,
+	.end	= GEMINI_WAQTCHDOG_BASE + 0x18,
+	.flags	= IORESOURCE_MEM,
+};
+
+static struct platform_device wdt_device = {
+	.name		= "wdt-gemini",
+	.id		= 0,
+	.resource	= &wdt_resource,
+	.num_resources	= 1,
+};
+
+int __init platform_register_watchdog(void)
+{
+	return platform_device_register(&wdt_device);
+}
+
--- a/arch/arm/mach-gemini/common.h	2011-04-19 03:05:29.446367900 +0200
+++ b/arch/arm/mach-gemini/common.h	2011-04-19 03:07:02.191154293 +0200
@@ -27,5 +27,6 @@
 				    unsigned int nr_parts);
 extern int platform_register_pwc(void);
 extern int platform_register_pata(unsigned int i);
+extern int platform_register_watchdog(void);
 
 extern void gemini_restart(char mode, const char *cmd);
 
--- a/arch/arm/mach-gemini/board-nas4220b.c	2011-04-19 02:49:10.691486103 +0200
+++ b/arch/arm/mach-gemini/board-nas4220b.c	2011-04-19 02:47:58.956362077 +0200
@@ -115,6 +115,7 @@
 	platform_register_pwc();
	platform_register_pata(0);
 	platform_register_pata(1);
+	platform_register_watchdog();
 }
 
 MACHINE_START(NAS4220B, "Raidsonic NAS IB-4220-B")
--- a/drivers/watchdog/Kconfig
+++ b/drivers/watchdog/Kconfig
@@ -154,6 +154,16 @@ config 977_WATCHDOG
 
 	  Not sure? It's safe to say N.
 
+config GEMINI_WATCHDOG
+	tristate "Gemini watchdog"
+	depends on ARCH_GEMINI
+	help
+	  Say Y here if to include support for the watchdog timer
+	  embedded in the Cortina Systems Gemini family of devices.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called gemini_wdt.
+
 config IXP4XX_WATCHDOG
 	tristate "IXP4xx Watchdog"
 	depends on ARCH_IXP4XX
--- a/drivers/watchdog/Makefile
+++ b/drivers/watchdog/Makefile
@@ -36,6 +36,7 @@ obj-$(CONFIG_OMAP_WATCHDOG) += omap_wdt.o
 obj-$(CONFIG_TWL4030_WATCHDOG) += twl4030_wdt.o
 obj-$(CONFIG_21285_WATCHDOG) += wdt285.o
 obj-$(CONFIG_977_WATCHDOG) += wdt977.o
+obj-$(CONFIG_GEMINI_WATCHDOG) += gemini_wdt.o
 obj-$(CONFIG_IXP4XX_WATCHDOG) += ixp4xx_wdt.o
 obj-$(CONFIG_KS8695_WATCHDOG) += ks8695_wdt.o
 obj-$(CONFIG_S3C2410_WATCHDOG) += s3c2410_wdt.o
--- /dev/null
+++ b/drivers/watchdog/gemini_wdt.c
@@ -0,0 +1,380 @@
+/*
+ *  Watchdog driver for Cortina Systems Gemini SoC
+ *
+ *  Copyright (C) 2009 Paulius Zaleckas <paulius.zaleckas@teltonika.lt>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/fs.h>
+#include <linux/slab.h>
+#include <linux/uaccess.h>
+#include <linux/miscdevice.h>
+#include <linux/platform_device.h>
+#include <linux/watchdog.h>
+#include <linux/module.h>
+
+#define DRV_NAME	"wdt-gemini"
+
+#define GEMINI_WDCOUNTER(base)	(void __iomem*)(base + 0x0)
+#define GEMINI_WDLOAD(base)	(void __iomem*)(base + 0x4)
+#define GEMINI_WDRESTART(base)	(void __iomem*)(base + 0x8)
+#define GEMINI_WDCR(base)	(void __iomem*)(base + 0xC)
+
+#define WDRESTART_MAGIC		0x5AB9
+
+#define WDCR_CLOCK_5MHZ		(1 << 4)
+#define WDCR_SYS_RST		(1 << 1)
+#define WDCR_ENABLE		(1 << 0)
+
+#define WDT_CLOCK		5000000		/* 5 MHz */
+#define WDT_DEFAULT_TIMEOUT	13
+#define WDT_MAX_TIMEOUT		(0xFFFFFFFF / WDT_CLOCK)
+
+/* status bits */
+#define WDT_ACTIVE		0
+#define WDT_OK_TO_CLOSE		1
+
+static unsigned int timeout = WDT_DEFAULT_TIMEOUT;
+static int nowayout = WATCHDOG_NOWAYOUT;
+
+module_param(timeout, uint, 0);
+MODULE_PARM_DESC(timeout, "Watchdog timeout in seconds");
+
+module_param(nowayout, int, 0);
+MODULE_PARM_DESC(nowayout, "Watchdog cannot be stopped once started");
+
+MODULE_DESCRIPTION("Watchdog driver for Gemini");
+MODULE_ALIAS("platform:" DRV_NAME);
+MODULE_ALIAS_MISCDEV(WATCHDOG_MINOR);
+MODULE_AUTHOR("Paulius Zaleckas");
+MODULE_LICENSE("GPL");
+
+static DEFINE_SPINLOCK(gemini_wdt_lock);
+
+static struct platform_device *gemini_wdt_dev;
+
+struct gemini_wdt_struct {
+	struct resource		*res;
+	struct device		*dev;
+	void __iomem		*base;
+	unsigned long		status;
+};
+
+static struct watchdog_info gemini_wdt_info = {
+	.identity	= "Gemini watchdog",
+	.options	= WDIOF_MAGICCLOSE | WDIOF_KEEPALIVEPING |
+			  WDIOF_SETTIMEOUT,
+	.firmware_version = 0,
+};
+
+/* Disable the watchdog. */
+static void gemini_wdt_stop(struct gemini_wdt_struct *gemini_wdt)
+{
+	spin_lock(&gemini_wdt_lock);
+
+	writel(0, GEMINI_WDCR(gemini_wdt->base));
+
+	clear_bit(WDT_ACTIVE, &gemini_wdt->status);
+
+	spin_unlock(&gemini_wdt_lock);
+}
+
+/* Service the watchdog */
+static void gemini_wdt_service(struct gemini_wdt_struct *gemini_wdt)
+{
+	writel(WDRESTART_MAGIC, GEMINI_WDRESTART(gemini_wdt->base));
+}
+
+/* Enable and reset the watchdog. */
+static void gemini_wdt_start(struct gemini_wdt_struct *gemini_wdt)
+{
+	spin_lock(&gemini_wdt_lock);
+
+	writel(timeout * WDT_CLOCK, GEMINI_WDLOAD(gemini_wdt->base));
+
+	gemini_wdt_service(gemini_wdt);
+
+	/* set clock before enabling */
+	writel(WDCR_CLOCK_5MHZ | WDCR_SYS_RST,
+			GEMINI_WDCR(gemini_wdt->base));
+
+	writel(WDCR_CLOCK_5MHZ | WDCR_SYS_RST | WDCR_ENABLE,
+			GEMINI_WDCR(gemini_wdt->base));
+
+	set_bit(WDT_ACTIVE, &gemini_wdt->status);
+
+	spin_unlock(&gemini_wdt_lock);
+}
+
+/* Watchdog device is opened, and watchdog starts running. */
+static int gemini_wdt_open(struct inode *inode, struct file *file)
+{
+	struct gemini_wdt_struct *gemini_wdt;
+
+	gemini_wdt = platform_get_drvdata(gemini_wdt_dev);
+
+	if (test_bit(WDT_ACTIVE, &gemini_wdt->status))
+		return -EBUSY;
+
+	file->private_data = gemini_wdt;
+
+	gemini_wdt_start(gemini_wdt);
+
+	return nonseekable_open(inode, file);
+}
+
+/* Close the watchdog device. */
+static int gemini_wdt_close(struct inode *inode, struct file *file)
+{
+	struct gemini_wdt_struct *gemini_wdt = file->private_data;
+
+	/* Disable the watchdog if possible */
+	if (test_bit(WDT_OK_TO_CLOSE, &gemini_wdt->status))
+		gemini_wdt_stop(gemini_wdt);
+	else
+		dev_warn(gemini_wdt->dev, "Device closed unexpectedly - timer will not stop\n");
+
+	return 0;
+}
+
+/* Handle commands from user-space. */
+static long gemini_wdt_ioctl(struct file *file,
+				unsigned int cmd, unsigned long arg)
+{
+	void __user *argp = (void __user *)arg;
+	struct gemini_wdt_struct *gemini_wdt = file->private_data;
+	int value;
+
+	switch (cmd) {
+	case WDIOC_KEEPALIVE:
+		gemini_wdt_service(gemini_wdt);
+		return 0;
+
+	case WDIOC_GETSUPPORT:
+		if (copy_to_user(argp, &gemini_wdt_info, sizeof(gemini_wdt_info)))
+			return -EFAULT;
+
+	case WDIOC_SETTIMEOUT:
+		if (get_user(value, (int *)arg))
+			return -EFAULT;
+
+		if ((value < 1) || (value > WDT_MAX_TIMEOUT))
+			return -EINVAL;
+
+		timeout = value;
+
+		/* restart wdt to use new timeout */
+		gemini_wdt_stop(gemini_wdt);
+		gemini_wdt_start(gemini_wdt);
+
+		/* Fall through */
+	case WDIOC_GETTIMEOUT:
+		return put_user(timeout, (int *)arg);
+
+	case WDIOC_GETTIMELEFT:
+		value = readl(GEMINI_WDCOUNTER(gemini_wdt->base));
+		return put_user(value / WDT_CLOCK, (int *)arg);
+
+	default:
+		return -ENOTTY;
+	}
+}
+
+/* Refresh the watchdog whenever device is written to. */
+static ssize_t gemini_wdt_write(struct file *file, const char *data,
+						size_t len, loff_t *ppos)
+{
+	struct gemini_wdt_struct *gemini_wdt = file->private_data;
+
+	if (len) {
+		if (!nowayout) {
+			size_t i;
+
+			clear_bit(WDT_OK_TO_CLOSE, &gemini_wdt->status);
+			for (i = 0; i != len; i++) {
+				char c;
+
+				if (get_user(c, data + i))
+					return -EFAULT;
+				if (c == 'V')
+					set_bit(WDT_OK_TO_CLOSE,
+						&gemini_wdt->status);
+			}
+		}
+		gemini_wdt_service(gemini_wdt);
+	}
+
+	return len;
+}
+
+static const struct file_operations gemini_wdt_fops = {
+	.owner		= THIS_MODULE,
+	.llseek		= no_llseek,
+	.open		= gemini_wdt_open,
+	.unlocked_ioctl	= gemini_wdt_ioctl,
+	.release	= gemini_wdt_close,
+	.write		= gemini_wdt_write,
+};
+
+static struct miscdevice gemini_wdt_miscdev = {
+	.minor		= WATCHDOG_MINOR,
+	.name		= "watchdog",
+	.fops		= &gemini_wdt_fops,
+};
+
+static void gemini_wdt_shutdown(struct platform_device *pdev)
+{
+	struct gemini_wdt_struct *gemini_wdt = platform_get_drvdata(pdev);
+
+	gemini_wdt_stop(gemini_wdt);
+}
+
+static int __init gemini_wdt_probe(struct platform_device *pdev)
+{
+	int ret;
+	int res_size;
+	struct resource *res;
+	void __iomem *base;
+	struct gemini_wdt_struct *gemini_wdt;
+	unsigned int reg;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		dev_err(&pdev->dev, "can't get device resources\n");
+		return -ENODEV;
+	}
+
+	base = devm_request_and_ioremap(&pdev->dev, res);
+	if (!base) {
+		dev_err(&pdev->dev, "ioremap failed\n");
+		ret = -EIO;
+		goto fail0;
+	}
+
+	gemini_wdt = kzalloc(sizeof(struct gemini_wdt_struct), GFP_KERNEL);
+	if (!gemini_wdt) {
+		dev_err(&pdev->dev, "can't allocate interface\n");
+		ret = -ENOMEM;
+		goto fail1;
+	}
+
+	/* Setup gemini_wdt driver structure */
+	gemini_wdt->base = base;
+	gemini_wdt->res = res;
+
+	/* Set up platform driver data */
+	platform_set_drvdata(pdev, gemini_wdt);
+	gemini_wdt_dev = pdev;
+
+	if (gemini_wdt_miscdev.parent) {
+		ret = -EBUSY;
+		goto fail2;
+	}
+
+	gemini_wdt_miscdev.parent = &pdev->dev;
+
+	reg = __raw_readw(GEMINI_WDCR(gemini_wdt->base));
+	if (reg & WDCR_ENABLE) {
+		/* Watchdog was enabled by the bootloader, disable it. */
+		reg &= ~(WDCR_ENABLE);
+		writel(reg, GEMINI_WDCR(gemini_wdt->base));
+	}
+
+	ret = misc_register(&gemini_wdt_miscdev);
+	if (ret)
+		goto fail2;
+
+	return 0;
+
+fail2:
+	platform_set_drvdata(pdev, NULL);
+	kfree(gemini_wdt);
+fail1:
+	iounmap(base);
+fail0:
+	release_mem_region(res->start, res_size);
+
+	return ret;
+}
+
+static int __exit gemini_wdt_remove(struct platform_device *pdev)
+{
+	struct gemini_wdt_struct *gemini_wdt = platform_get_drvdata(pdev);
+
+	platform_set_drvdata(pdev, NULL);
+	misc_deregister(&gemini_wdt_miscdev);
+	gemini_wdt_dev = NULL;
+	iounmap(gemini_wdt->base);
+	release_mem_region(gemini_wdt->res->start,
+		resource_size(gemini_wdt->res));
+
+	kfree(gemini_wdt);
+
+	return 0;
+}
+
+#ifdef CONFIG_PM
+static int gemini_wdt_suspend(struct platform_device *pdev,
+				pm_message_t message)
+{
+	struct gemini_wdt_struct *gemini_wdt = platform_get_drvdata(pdev);
+	unsigned int reg;
+
+	reg = __raw_readw(GEMINI_WDCR(gemini_wdt->base));
+	reg &= ~(WDCR_WDENABLE);
+	writel(reg, GEMINI_WDCR(gemini_wdt->base));
+
+	return 0;
+}
+
+static int gemini_wdt_resume(struct platform_device *pdev)
+{
+	struct gemini_wdt_struct *gemini_wdt = platform_get_drvdata(pdev);
+	unsigned int reg;
+
+	if (gemini_wdt->status) {
+		reg = __raw_readw(GEMINI_WDCR(gemini_wdt->base));
+		reg |= WDCR_WDENABLE;
+		writel(reg, GEMINI_WDCR(gemini_wdt->base));
+	}
+
+	return 0;
+}
+#else
+#define gemini_wdt_suspend	NULL
+#define gemini_wdt_resume	NULL
+#endif
+
+static struct platform_driver gemini_wdt_driver = {
+	.probe		= gemini_wdt_probe,
+	.remove		= __exit_p(gemini_wdt_remove),
+	.shutdown	= gemini_wdt_shutdown,
+	.suspend	= gemini_wdt_suspend,
+	.resume		= gemini_wdt_resume,
+	.driver.name	= DRV_NAME,
+	.driver.owner	= THIS_MODULE,
+};
+
+static int __init gemini_wdt_init(void)
+{
+	int	retval;
+
+	retval = platform_driver_probe(&gemini_wdt_driver, gemini_wdt_probe);
+	if (retval == 0)
+		pr_info(DRV_NAME ": registered successfully");
+	return retval;
+}
+
+static void __exit gemini_wdt_exit(void)
+{
+	platform_driver_unregister(&gemini_wdt_driver);
+}
+
+module_init(gemini_wdt_init);
+module_exit(gemini_wdt_exit);
