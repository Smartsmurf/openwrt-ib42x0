--- a/arch/arm/mach-gemini/gpio.c	2012-12-18 20:06:55.424576934 +0100
+++ b/arch/arm/mach-gemini/gpio.c	2012-12-18 20:12:36.531668926 +0100
@@ -25,22 +25,22 @@
 #define GPIO_BASE(x)		IO_ADDRESS(GEMINI_GPIO_BASE(x))
 
 /* GPIO registers definition */
-#define GPIO_DATA_OUT		0x0
-#define GPIO_DATA_IN		0x4
-#define GPIO_DIR		0x8
-#define GPIO_DATA_SET		0x10
-#define GPIO_DATA_CLR		0x14
-#define GPIO_PULL_EN		0x18
-#define GPIO_PULL_TYPE		0x1C
-#define GPIO_INT_EN		0x20
-#define GPIO_INT_STAT		0x24
-#define GPIO_INT_MASK		0x2C
-#define GPIO_INT_CLR		0x30
-#define GPIO_INT_TYPE		0x34
-#define GPIO_INT_BOTH_EDGE	0x38
-#define GPIO_INT_LEVEL		0x3C
-#define GPIO_DEBOUNCE_EN	0x40
-#define GPIO_DEBOUNCE_PRESCALE	0x44
+#define GPIO_DATA_OUT(base)		(void __iomem*)(base + 0x0)
+#define GPIO_DATA_IN(base)		(void __iomem*)(base + 0x4)
+#define GPIO_DIR(base)			(void __iomem*)(base + 0x8)
+#define GPIO_DATA_SET(base)		(void __iomem*)(base + 0x10)
+#define GPIO_DATA_CLR(base)		(void __iomem*)(base + 0x14)
+#define GPIO_PULL_EN(base)		(void __iomem*)(base + 0x18)
+#define GPIO_PULL_TYPE(base)		(void __iomem*)(base + 0x1C)
+#define GPIO_INT_EN(base)		(void __iomem*)(base + 0x20)
+#define GPIO_INT_STAT(base)		(void __iomem*)(base + 0x24)
+#define GPIO_INT_MASK(base)		(void __iomem*)(base + 0x2C)
+#define GPIO_INT_CLR(base)		(void __iomem*)(base + 0x30)
+#define GPIO_INT_TYPE(base)		(void __iomem*)(base + 0x34)
+#define GPIO_INT_BOTH_EDGE(base)	(void __iomem*)(base + 0x38)
+#define GPIO_INT_LEVEL(base)		(void __iomem*)(base + 0x3C)
+#define GPIO_DEBOUNCE_EN(base)		(void __iomem*)(base + 0x40)
+#define GPIO_DEBOUNCE_PRESCALE(base)	(void __iomem*)(base + 0x44)
 
 #define GPIO_PORT_NUM		3
 
@@ -49,9 +49,9 @@
 {
 	unsigned int reg;
 
-	reg = __raw_readl(base + GPIO_INT_EN);
+	reg = __raw_readl(GPIO_INT_EN(base));
 	reg = (reg & (~(1 << index))) | (!!enable << index);
-	__raw_writel(reg, base + GPIO_INT_EN);
+	__raw_writel(reg, GPIO_INT_EN(base));
 }
 
 static void gpio_ack_irq(struct irq_data *d)
@@ -59,7 +59,7 @@
 	unsigned int gpio = irq_to_gpio(d->irq);
 	unsigned int base = GPIO_BASE(gpio / 32);
 
-	__raw_writel(1 << (gpio % 32), base + GPIO_INT_CLR);
+	__raw_writel(1 << (gpio % 32), GPIO_INT_CLR(base));
 }
 
 static void gpio_mask_irq(struct irq_data *d)
@@ -85,9 +85,9 @@
 	unsigned int base = GPIO_BASE(gpio / 32);
 	unsigned int reg_both, reg_level, reg_type;
 
-	reg_type = __raw_readl(base + GPIO_INT_TYPE);
-	reg_level = __raw_readl(base + GPIO_INT_LEVEL);
-	reg_both = __raw_readl(base + GPIO_INT_BOTH_EDGE);
+	reg_type  = __raw_readl(GPIO_INT_TYPE(base));
+	reg_level = __raw_readl(GPIO_INT_LEVEL(base));
+	reg_both  = __raw_readl(GPIO_INT_BOTH_EDGE(base));
 
 	switch (type) {
 	case IRQ_TYPE_EDGE_BOTH:
@@ -95,32 +95,32 @@
 		reg_both |= gpio_mask;
 		break;
 	case IRQ_TYPE_EDGE_RISING:
-		reg_type &= ~gpio_mask;
-		reg_both &= ~gpio_mask;
+		reg_type  &= ~gpio_mask;
+		reg_both  &= ~gpio_mask;
 		reg_level &= ~gpio_mask;
 		break;
 	case IRQ_TYPE_EDGE_FALLING:
-		reg_type &= ~gpio_mask;
-		reg_both &= ~gpio_mask;
+		reg_type  &= ~gpio_mask;
+		reg_both  &= ~gpio_mask;
 		reg_level |= gpio_mask;
 		break;
 	case IRQ_TYPE_LEVEL_HIGH:
-		reg_type |= gpio_mask;
+		reg_type  |= gpio_mask;
 		reg_level &= ~gpio_mask;
 		break;
 	case IRQ_TYPE_LEVEL_LOW:
-		reg_type |= gpio_mask;
+		reg_type  |= gpio_mask;
 		reg_level |= gpio_mask;
 		break;
 	default:
 		return -EINVAL;
 	}
 
-	__raw_writel(reg_type, base + GPIO_INT_TYPE);
-	__raw_writel(reg_level, base + GPIO_INT_LEVEL);
-	__raw_writel(reg_both, base + GPIO_INT_BOTH_EDGE);
+	__raw_writel(reg_type,  GPIO_INT_TYPE(base));
+	__raw_writel(reg_level, GPIO_INT_LEVEL(base));
+	__raw_writel(reg_both,  GPIO_INT_BOTH_EDGE(base));
 
-	gpio_ack_irq(d->irq);
+	gpio_ack_irq(d);
 
 	return 0;
 }
@@ -130,7 +130,7 @@
 	unsigned int port = (unsigned int)irq_desc_get_handler_data(desc);
 	unsigned int gpio_irq_no, irq_stat;
 
-	irq_stat = __raw_readl(GPIO_BASE(port) + GPIO_INT_STAT);
+	irq_stat = __raw_readl(GPIO_INT_STAT(GPIO_BASE(port)));
 
 	gpio_irq_no = GPIO_IRQ_BASE + port * 32;
 	for (; irq_stat != 0; irq_stat >>= 1, gpio_irq_no++) {
@@ -156,12 +156,12 @@
 	unsigned int base = GPIO_BASE(offset / 32);
 	unsigned int reg;
 
-	reg = __raw_readl(base + GPIO_DIR);
+	reg = __raw_readl(GPIO_DIR(base));
 	if (dir)
 		reg |= 1 << (offset % 32);
 	else
 		reg &= ~(1 << (offset % 32));
-	__raw_writel(reg, base + GPIO_DIR);
+	__raw_writel(reg, GPIO_DIR(base));
 }
 
 static void gemini_gpio_set(struct gpio_chip *chip, unsigned offset, int value)
@@ -169,16 +169,16 @@
 	unsigned int base = GPIO_BASE(offset / 32);
 
 	if (value)
-		__raw_writel(1 << (offset % 32), base + GPIO_DATA_SET);
+		__raw_writel(1 << (offset % 32), GPIO_DATA_SET(base));
 	else
-		__raw_writel(1 << (offset % 32), base + GPIO_DATA_CLR);
+		__raw_writel(1 << (offset % 32), GPIO_DATA_CLR(base));
 }
 
 static int gemini_gpio_get(struct gpio_chip *chip, unsigned offset)
 {
 	unsigned int base = GPIO_BASE(offset / 32);
 
-	return (__raw_readl(base + GPIO_DATA_IN) >> (offset % 32)) & 1;
+	return (__raw_readl(GPIO_DATA_IN(base)) >> (offset % 32)) & 1;
 }
 
 static int gemini_gpio_direction_input(struct gpio_chip *chip, unsigned offset)
@@ -211,9 +211,9 @@
 
 	for (i = 0; i < GPIO_PORT_NUM; i++) {
 		/* disable, unmask and clear all interrupts */
-		__raw_writel(0x0, GPIO_BASE(i) + GPIO_INT_EN);
-		__raw_writel(0x0, GPIO_BASE(i) + GPIO_INT_MASK);
-		__raw_writel(~0x0, GPIO_BASE(i) + GPIO_INT_CLR);
+		__raw_writel(0x0,  GPIO_INT_EN(GPIO_BASE(i)));
+		__raw_writel(0x0,  GPIO_INT_MASK(GPIO_BASE(i)));
+		__raw_writel(~0x0, GPIO_INT_CLR(GPIO_BASE(i)));
 
 		for (j = GPIO_IRQ_BASE + i * 32;
 		     j < GPIO_IRQ_BASE + (i + 1) * 32; j++) {
